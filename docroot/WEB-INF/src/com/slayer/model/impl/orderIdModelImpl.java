/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.slayer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.slayer.model.orderId;
import com.slayer.model.orderIdModel;
import com.slayer.model.orderIdSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the orderId service. Represents a row in the &quot;CrowdFunds_orderId&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.slayer.model.orderIdModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link orderIdImpl}.
 * </p>
 *
 * @author nithesh
 * @see orderIdImpl
 * @see com.slayer.model.orderId
 * @see com.slayer.model.orderIdModel
 * @generated
 */
@JSON(strict = true)
public class orderIdModelImpl extends BaseModelImpl<orderId>
	implements orderIdModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a order ID model instance should use the {@link com.slayer.model.orderId} interface instead.
	 */
	public static final String TABLE_NAME = "CrowdFunds_orderId";
	public static final Object[][] TABLE_COLUMNS = {
			{ "transactionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "buyer", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "amount", Types.VARCHAR },
			{ "currencyType", Types.VARCHAR },
			{ "receiverEmail", Types.VARCHAR },
			{ "payerEmail", Types.VARCHAR },
			{ "debit", Types.VARCHAR },
			{ "credit", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CrowdFunds_orderId (transactionId LONG not null primary key,companyId LONG,buyer VARCHAR(75) null,createDate DATE null,amount VARCHAR(75) null,currencyType VARCHAR(75) null,receiverEmail VARCHAR(75) null,payerEmail VARCHAR(75) null,debit VARCHAR(75) null,credit VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CrowdFunds_orderId";
	public static final String ORDER_BY_JPQL = " ORDER BY orderId.transactionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CrowdFunds_orderId.transactionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.slayer.model.orderId"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.slayer.model.orderId"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static orderId toModel(orderIdSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		orderId model = new orderIdImpl();

		model.setTransactionId(soapModel.getTransactionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setBuyer(soapModel.getBuyer());
		model.setCreateDate(soapModel.getCreateDate());
		model.setAmount(soapModel.getAmount());
		model.setCurrencyType(soapModel.getCurrencyType());
		model.setReceiverEmail(soapModel.getReceiverEmail());
		model.setPayerEmail(soapModel.getPayerEmail());
		model.setDebit(soapModel.getDebit());
		model.setCredit(soapModel.getCredit());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<orderId> toModels(orderIdSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<orderId> models = new ArrayList<orderId>(soapModels.length);

		for (orderIdSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.slayer.model.orderId"));

	public orderIdModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _transactionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTransactionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _transactionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return orderId.class;
	}

	@Override
	public String getModelClassName() {
		return orderId.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("transactionId", getTransactionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("buyer", getBuyer());
		attributes.put("createDate", getCreateDate());
		attributes.put("amount", getAmount());
		attributes.put("currencyType", getCurrencyType());
		attributes.put("receiverEmail", getReceiverEmail());
		attributes.put("payerEmail", getPayerEmail());
		attributes.put("debit", getDebit());
		attributes.put("credit", getCredit());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long transactionId = (Long)attributes.get("transactionId");

		if (transactionId != null) {
			setTransactionId(transactionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String buyer = (String)attributes.get("buyer");

		if (buyer != null) {
			setBuyer(buyer);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String amount = (String)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String currencyType = (String)attributes.get("currencyType");

		if (currencyType != null) {
			setCurrencyType(currencyType);
		}

		String receiverEmail = (String)attributes.get("receiverEmail");

		if (receiverEmail != null) {
			setReceiverEmail(receiverEmail);
		}

		String payerEmail = (String)attributes.get("payerEmail");

		if (payerEmail != null) {
			setPayerEmail(payerEmail);
		}

		String debit = (String)attributes.get("debit");

		if (debit != null) {
			setDebit(debit);
		}

		String credit = (String)attributes.get("credit");

		if (credit != null) {
			setCredit(credit);
		}
	}

	@JSON
	@Override
	public long getTransactionId() {
		return _transactionId;
	}

	@Override
	public void setTransactionId(long transactionId) {
		_transactionId = transactionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getBuyer() {
		if (_buyer == null) {
			return StringPool.BLANK;
		}
		else {
			return _buyer;
		}
	}

	@Override
	public void setBuyer(String buyer) {
		_buyer = buyer;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getAmount() {
		if (_amount == null) {
			return StringPool.BLANK;
		}
		else {
			return _amount;
		}
	}

	@Override
	public void setAmount(String amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getCurrencyType() {
		if (_currencyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencyType;
		}
	}

	@Override
	public void setCurrencyType(String currencyType) {
		_currencyType = currencyType;
	}

	@JSON
	@Override
	public String getReceiverEmail() {
		if (_receiverEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiverEmail;
		}
	}

	@Override
	public void setReceiverEmail(String receiverEmail) {
		_receiverEmail = receiverEmail;
	}

	@JSON
	@Override
	public String getPayerEmail() {
		if (_payerEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _payerEmail;
		}
	}

	@Override
	public void setPayerEmail(String payerEmail) {
		_payerEmail = payerEmail;
	}

	@JSON
	@Override
	public String getDebit() {
		if (_debit == null) {
			return StringPool.BLANK;
		}
		else {
			return _debit;
		}
	}

	@Override
	public void setDebit(String debit) {
		_debit = debit;
	}

	@JSON
	@Override
	public String getCredit() {
		if (_credit == null) {
			return StringPool.BLANK;
		}
		else {
			return _credit;
		}
	}

	@Override
	public void setCredit(String credit) {
		_credit = credit;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			orderId.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public orderId toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (orderId)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		orderIdImpl orderIdImpl = new orderIdImpl();

		orderIdImpl.setTransactionId(getTransactionId());
		orderIdImpl.setCompanyId(getCompanyId());
		orderIdImpl.setBuyer(getBuyer());
		orderIdImpl.setCreateDate(getCreateDate());
		orderIdImpl.setAmount(getAmount());
		orderIdImpl.setCurrencyType(getCurrencyType());
		orderIdImpl.setReceiverEmail(getReceiverEmail());
		orderIdImpl.setPayerEmail(getPayerEmail());
		orderIdImpl.setDebit(getDebit());
		orderIdImpl.setCredit(getCredit());

		orderIdImpl.resetOriginalValues();

		return orderIdImpl;
	}

	@Override
	public int compareTo(orderId orderId) {
		long primaryKey = orderId.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof orderId)) {
			return false;
		}

		orderId orderId = (orderId)obj;

		long primaryKey = orderId.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<orderId> toCacheModel() {
		orderIdCacheModel orderIdCacheModel = new orderIdCacheModel();

		orderIdCacheModel.transactionId = getTransactionId();

		orderIdCacheModel.companyId = getCompanyId();

		orderIdCacheModel.buyer = getBuyer();

		String buyer = orderIdCacheModel.buyer;

		if ((buyer != null) && (buyer.length() == 0)) {
			orderIdCacheModel.buyer = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			orderIdCacheModel.createDate = createDate.getTime();
		}
		else {
			orderIdCacheModel.createDate = Long.MIN_VALUE;
		}

		orderIdCacheModel.amount = getAmount();

		String amount = orderIdCacheModel.amount;

		if ((amount != null) && (amount.length() == 0)) {
			orderIdCacheModel.amount = null;
		}

		orderIdCacheModel.currencyType = getCurrencyType();

		String currencyType = orderIdCacheModel.currencyType;

		if ((currencyType != null) && (currencyType.length() == 0)) {
			orderIdCacheModel.currencyType = null;
		}

		orderIdCacheModel.receiverEmail = getReceiverEmail();

		String receiverEmail = orderIdCacheModel.receiverEmail;

		if ((receiverEmail != null) && (receiverEmail.length() == 0)) {
			orderIdCacheModel.receiverEmail = null;
		}

		orderIdCacheModel.payerEmail = getPayerEmail();

		String payerEmail = orderIdCacheModel.payerEmail;

		if ((payerEmail != null) && (payerEmail.length() == 0)) {
			orderIdCacheModel.payerEmail = null;
		}

		orderIdCacheModel.debit = getDebit();

		String debit = orderIdCacheModel.debit;

		if ((debit != null) && (debit.length() == 0)) {
			orderIdCacheModel.debit = null;
		}

		orderIdCacheModel.credit = getCredit();

		String credit = orderIdCacheModel.credit;

		if ((credit != null) && (credit.length() == 0)) {
			orderIdCacheModel.credit = null;
		}

		return orderIdCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{transactionId=");
		sb.append(getTransactionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", buyer=");
		sb.append(getBuyer());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", currencyType=");
		sb.append(getCurrencyType());
		sb.append(", receiverEmail=");
		sb.append(getReceiverEmail());
		sb.append(", payerEmail=");
		sb.append(getPayerEmail());
		sb.append(", debit=");
		sb.append(getDebit());
		sb.append(", credit=");
		sb.append(getCredit());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.slayer.model.orderId");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>transactionId</column-name><column-value><![CDATA[");
		sb.append(getTransactionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buyer</column-name><column-value><![CDATA[");
		sb.append(getBuyer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyType</column-name><column-value><![CDATA[");
		sb.append(getCurrencyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiverEmail</column-name><column-value><![CDATA[");
		sb.append(getReceiverEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payerEmail</column-name><column-value><![CDATA[");
		sb.append(getPayerEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debit</column-name><column-value><![CDATA[");
		sb.append(getDebit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>credit</column-name><column-value><![CDATA[");
		sb.append(getCredit());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = orderId.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			orderId.class
		};
	private long _transactionId;
	private long _companyId;
	private String _buyer;
	private Date _createDate;
	private String _amount;
	private String _currencyType;
	private String _receiverEmail;
	private String _payerEmail;
	private String _debit;
	private String _credit;
	private orderId _escapedModel;
}